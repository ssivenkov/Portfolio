// fonts
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Hind+Siliguri:wght@400;500;600&display=swap');

// selected content
*::selection {
    color: #fff;
    background-color: var(--primary);
    text-shadow: none;
}

// initial colors
html {
    --primary_light: #c8a6ff;
    --primary: #813afe;
    --primary_medium: #5925b4;
    --primary_half-medium: #23085f;
    --primary_dark: #150439;
    --background_light: #252525;
    --background: #0E1111;
    --background_dark: #000;
    --text: #fff;
    --misc: #fff;
}

// width
$maxWidthForMixin: 1920;
$maxWidth: 1920;
$minWidth: 320;

// mixins
@mixin no-select {
    -ms-user-select: none;
    -webkit-touch-callout: none;
    -moz-user-select: none;
    -webkit-user-select: none;
    user-select: none;
}

@mixin adaptiveWidth($property, $maxWidthViewport, $minWidthViewport, $startSize, $endSize, $unit, $type) {
    // $property: string - property name in css format
    // $maxWidthViewport: number - width of the viewport(in pixels) at which scaling begins. With $maxWidthViewport size of $property corresponds to $startSize
    // $minWidthViewport: number - width of the viewport(in pixels) at which scaling ends. With $minWidthViewport size of $property corresponds to $endSize
    // $startSize: number - size of $property at viewport size $maxWidthViewport
    // $endSize: number - size of $property at viewport size $minWidthViewport
    // $unit: string - unit for $property
    // $type: number - mixin operation mode

    $addSize: $startSize - $endSize;
    @if $type==1 {
        // only if is less container
        #{$property}: $startSize + $unit;
        @media (max-width: #{$maxWidthViewport + $unit}) {
            #{$property}: calc(#{$endSize + $unit} + #{$addSize} * ((100vw - #{$minWidthViewport}px) / #{$maxWidthViewport - $minWidthViewport}));
        }
    } @else if $type==2 {
        // only if is more container
        #{$property}: $startSize + $unit;
        @media (min-width: #{$maxWidthViewport + $unit}) {
            #{$property}: calc(#{$endSize + $unit} + #{$addSize} * ((100vw - #{$minWidthViewport}px) / #{$maxWidthForMixin - $minWidthViewport}));
        }
    } @else {
        // always
        #{$property}: calc(#{$endSize + $unit} + #{$addSize} * ((100vw - #{$minWidthViewport}px) / #{$maxWidthForMixin - $minWidthViewport}));
    }
}

// hide default background color on click
* {
    -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
    -webkit-tap-highlight-color: transparent;
}
